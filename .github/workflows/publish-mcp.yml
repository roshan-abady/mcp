# Copyright 2025 Snowflake Inc.
# SPDX-License-Identifier: Apache-2.0
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: Publish to MCP Registry

on:
  workflow_run:
    workflows: ["Upload Python Package"]
    types:
      - completed
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read
  id-token: write  # Required for OIDC authentication

jobs:
  publish:
    runs-on: ubuntu-latest
    # Only run if the PyPI workflow succeeded OR if manually triggered
    if: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history and tags for git describe to work

    - name: Set VERSION from release tag
      run: |
        # Get the tag that corresponds to the commit
        git fetch --tags
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # For manual triggers, use the current commit
          TAG=$(git describe --tags --exact-match HEAD || git describe --tags --abbrev=0)
        else
          # For workflow_run triggers, use the commit from the triggering workflow
          TAG=$(git describe --tags --exact-match ${{ github.event.workflow_run.head_sha }})
        fi
        # Extract version from tag (remove 'v' prefix if present)
        VERSION=${TAG#v}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "Publishing version: $VERSION (from tag: $TAG)"

    - name: Update server.json with version
      run: |
        # Replace VERSION placeholder in server.json
        sed -i 's/\${VERSION}/'"$VERSION"'/g' server.json
        echo "Updated server.json with version $VERSION"

    - name: Install mcp-publisher
      run: |
        # Install mcp-publisher CLI
        curl -L "https://github.com/modelcontextprotocol/registry/releases/latest/download/mcp-publisher_$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/').tar.gz" | tar xz mcp-publisher && sudo mv mcp-publisher /usr/local/bin/
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Authenticate with MCP Registry
      run: |
        # Use GitHub OIDC authentication for organization-level publishing
        mcp-publisher login github-oidc

    - name: Publish to MCP Registry
      run: |
        mcp-publisher publish
